class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<Integer>();

        int n = matrix.length;
        int m = matrix[0].length;
        
        //int[] res = new int[n*m];

        int top = 0;
        int bottom = n-1;
        int left = 0;
        int right = m-1;
        //int count = 0;


        while (top <= bottom && left <= right)
        {
            for (int i = left; i<= right; i++)
            {
                //res[count++] = matrix[top][i];
                list.add(matrix[top][i]);
            }
            top++;

            for (int i=top; i<= bottom; i++)
            {
                //res[count++] = matrix[i][right];
                list.add(matrix[i][right]);
            }
            right--;
            if (top <= bottom)
            {
                for (int i= right; i>= left; i--)
                {
                    //res[count++] = matrix[bottom][i];
                    list.add(matrix[bottom][i]);
                }
                bottom--;
            }    
            if (left <=right)
            {
                for (int i=bottom; i>= top; i--)
                {
                    //res[count++] = matrix[i][left];
                    list.add(matrix[i][left]);
                }
                left++;
            }    
        }
        //System.out.println(Arrays.toString(res));
        return list;

        // int n = matrix.length;
        // int m = matrix[0].length;
        
        // int[] res = new int[m*n];

        // int top = 0;
        // int bottom = n-1;
        // int left = 0;
        // int right = m-1;


        // while (top <= bottom && left <= right)
        // {
        //     for (int i = left; i<= right; i++)
        //     {
        //         res[count] = matrix[top][i];
        //         count++;
        //     }
        //     top++;

        //     for (int i=top; i<= bottom; i++)
        //     {
        //         res[count] = matrix[i][left];
        //         count++;
        //     }
        //     right--;

        //     for (int i= left; i>= right; i--)
        //     {
        //         res[count] = matrix[bottom][i];
        //         count++;
        //     }
        //     bottom--;

        //     for (int i=bottom; i>= top; i--)
        //     {
        //         res[count] = matrix[i][left];
        //         count++;
        //     }
        //     left++;
        // }
        // return res;



        
    }
}