public class Solution {
     public static int lowbound(int[] arr, int x)
    {
        int lowbound = arr.length;
        int left = 0;
        int right = arr.length - 1;

        while (left <= right)
        {
            int mid = (left + right)/2;

            if (arr[mid] >= x)
            {
                lowbound = mid;
                right = mid - 1;
            }
            else
            {
                left = mid + 1;
            }   
        }

        return lowbound;
    }

    public static int uppbound(int[] arr, int x)
    {
        int highbound = -1;
        int left = 0;
        int right = arr.length - 1;

        while (left <= right)
        {
            int mid = (left + right)/2;

            if (arr[mid] <= x)
            {
                highbound = mid;
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }   
        }
        
        return highbound;
    }


    public static int count(int arr[], int n, int x) {
        //Your code goes here
        int[] ans = new int[2];

        ans[0] = -1;
        ans[1] = -1;

        ans[0] = lowbound(arr, x);

        if (ans[0] == arr.length || arr[ans[0]] != x)
        {
            ans[0] = -1;
            return 0;
        }

        ans[1] = uppbound(arr, x);

        return (ans[1] - ans[0] + 1);
    }
}