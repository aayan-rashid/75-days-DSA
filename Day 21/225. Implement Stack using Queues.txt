class MyStack {
    Queue<Integer> q;
    Queue<Integer> q1;
    Queue<Integer> q2;

    public MyStack() {
        q = new LinkedList<>();
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }
    
    public void push(int x) 
    {
        // using only 1 queue : q

        q.add(x);

        for (int i = 0; i < q.size() - 1; i++)
        {
            q.add(q.remove());
        }

        // using 2 queues : q1 and q2

        // q2.add(x);

        // while (!q1.isEmpty())
        // {
        //     q2.add(q1.remove());
        // }

        // while (!q2.isEmpty())
        // {
        //     q1.add(q2.remove());
        // }
        
    }
    
    public int pop() 
    {
        return q.remove();
        //return q1.remove();
    }
    
    public int top() 
    {
        return q.peek();
        //return q1.peek();    
        
    }
    
    public boolean empty() 
    {
        return q.isEmpty();
        //return q1.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */