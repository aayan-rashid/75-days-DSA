import java.util.*;

public class Solution{
    static class Queue {
        // Define the data members(if any) here.
        Stack<Integer> s1;
        Stack<Integer> s2;

        Queue() {
            // Initialize your data structure here.
            s1 = new Stack<>();
            s2 = new Stack<>();
        }

        void enQueue(int val) {
            // Implement the enqueue() function.
            s1.add(val);
        }

        int deQueue() {
            // Implement the dequeue() function.

            if (s1.isEmpty() && s2.isEmpty())
            {
                return -1;
            }


            if (!s2.isEmpty())
            {
                return s2.pop();
            }

            else
            {
                while (!s1.isEmpty())
                {
                    s2.add(s1.pop());
                }
            }

            return s2.pop();
        }

        int peek() {
            // Implement the peek() function here.
            // if (s1.isEmpty())
            // {
            //     return -1;
            // }
            
            if (s1.isEmpty() && s2.isEmpty())
            {
                return -1;
            }

            if (!s2.isEmpty())
            {
                return s2.peek();
            }

            else
            {
                while (!s1.isEmpty())
                {
                    s2.add(s1.pop());
                }
                return s2.peek();
            }
        }

        boolean isEmpty() {
            // Implement the isEmpty() function here.
            return (s1.isEmpty() && s2.isEmpty());
        }
    }
}