/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */



class Solution {
    public ListNode oddEvenList(ListNode head) 
    {
        // USING EVEN AND ODD LL 

        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenhead = head.next;

        if (head == null || head.next == null)
        {
            return head;
        }

        while (even != null && even.next != null)
        {
            // odd.next = odd.next.next;
            // even.next = even.next.next;

            if (odd.next != null) 
            {
                odd.next = odd.next.next;
            }
            if (even.next != null) 
            {
                even.next = even.next.next;
            }

            odd = odd.next;
            even = even.next;
        }

        
        if (odd != null) {
            odd.next = null;
        }

        odd.next = evenhead;

        return head;
        
        
        
        
        
        // USING ARRAY O(n) TO STORE VALUES AND REPLACING THEM WITH THE LINKED LIST 
        
        // ListNode temp = head;

        // int cnt = 0;
        // while (temp != null)
        // {
        //     cnt++;
        //     temp = temp.next;
        // }
        // int[] arr = new int[cnt];

        // temp = head;

        // int pos = 1;
        // int ind = 0;
        // while (temp != null) 
        // {
        //     if (pos % 2 != 0) 
        //     {
        //         arr[ind] = temp.val;
        //         ind++;
        //         pos++;
        //         temp = temp.next;
        //     }  
        //     else
        //     {
        //         pos++;
        //         temp = temp.next;
        //     }
        // }
        
        // temp = head;

        // pos = 1;
        // while (temp != null) 
        // {
        //     if (pos % 2 == 0) 
        //     {
        //         arr[ind] = temp.val;
        //         ind++;
        //         pos++;
        //         temp = temp.next;
        //     }  
        //     else
        //     {
        //         pos++;
        //         temp = temp.next;
        //     }
        // }

        // temp = head;
        // ind = 0;
        // while (temp != null)
        // {
        //     temp.val = arr[ind];
        //     ind++;
        //     temp = temp.next;
        // }
        // return head;




        // CONNECTING EVEN LL TO ODD LL AFTER INSERTING VALUES

        // ListNode temp = head;
        // ListNode even = head;
        // ListNode odd = head;

        // while (temp != null)
        // {
        //     if (temp.val % 2 == 0)
        //     {
        //         even.val = temp.val;
        //         even = even.next;
        //     }
        //     else
        //     {
        //         odd.val = temp.val;
        //         odd = odd.next;
        //     }
        //     temp = temp.next;
        // }
        

        // ListNode res = even;
        // while (even.next != null)
        // {
        //     even = even.next;
        // }
        // even.next = odd;

        // return res;
    }
}