import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        Arrays.sort(nums);
        System.out.println(Arrays.toString(nums));

        List<List<Integer>> list = new ArrayList<>();

        for (int i=0; i< nums.length; i++)
        {
            if (i > 0 && nums[i] == nums[i-1])
            {
                continue;
            }
            
            int low = i;
            int mid = i+1;
            int high = nums.length - 1;
            
            

            while (mid < high)
            {
                int sum = nums[low] + nums[mid] + nums[high];

                // if (mid > low + 1 && nums[mid] == nums[mid -1])
                // {
                //     mid++;
                //     continue;
                // }

                // if (high < nums.length - 1 && nums[high] == nums[high+1])
                // {
                //     high--;
                //     continue;
                // }
            
                if (sum < 0)
                {
                    mid++;
                }

                if (sum > 0)
                {
                    high--;
                }

                if (sum == 0)
                {
                    List<Integer> row = new ArrayList<>();
                    row.add(nums[low]);
                    row.add(nums[mid]);
                    row.add(nums[high]);

                    list.add(row);

                    // if (!list.contains(row))
                    // {
                    //     list.add(row);
                    // }
                    
                    mid++;
                    high--;

                    while (mid < high &&nums[mid] == nums[mid-1])
                    {
                        mid++;
                    }
                    while (mid < high && nums[high] == nums[high + 1])
                    {
                        high--;
                    }
                }

            }
        }

        return list;














        // Arrays.sort(nums);

        // List<List<Integer>> list = new ArrayList<>();

        // for (int i=0; i<nums.length-1; i++)
        // {
        //     int left = i;
        //     int mid = i+1;
        //     int right = nums.length - 1;

        //     int sum = nums[left] + nums[mid] + nums[right];

        //     while (mid < right)
        //     {
        //         if (nums[mid] != nums[mid-1])
        //         {
        //             if (sum == 0)
        //             {
        //                 List<Integer> row = new ArrayList<Integer>();
        //                 row.add(nums[left]);
        //                 row.add(nums[mid]);
        //                 row.add(nums[right]);

        //                 if (!list.contains(row))
        //                 {
        //                     list.add(row);
        //                 }    
        //             }
                    
                    
        //             if (sum > 0)
        //             {
        //                 right--;
        //             }

        //             if (sum < 0)
        //             {
        //                 sum = sum - nums[mid];
        //                 mid++;
        //                 sum += nums[mid];
        //             }
        //         }    
        //     }
        // }

        // return list;
        
        
        
        
        
        
        
        
        // int n = nums.length;
        // Arrays.sort(nums);
        // System.out.println(Arrays.toString(nums));

        // List<List<Integer>> list = new ArrayList<>();

        // for (int i=0; i<n-2; i++)
        // {
        //     if (i>0 && nums[i] == nums[i-1])
        //     {
        //         continue;
        //     }
            
        //     int j = i+1;
        //     int k = n-1;
            
        //     while (j<k)
        //     {
        //         int sum = nums[i] + nums[j] + nums[k];

        //         if (sum > 0)
        //         {
        //             k--;
        //         }

        //         if (sum < 0)
        //         {
        //             j++;
        //         }

        //         else
        //         {
        //             List<Integer> row = new ArrayList<>();
        //             row.add(nums[i]);
        //             row.add(nums[i+1]);
        //             row.add(nums[j]);

        //             Collections.sort(row);

        //             if (!list.contains(row))
        //             {
        //                 list.add(row);
        //             }     
        //             j++;
        //             k--;           
        //         }
        //     }    
        // }

        // return list;






        // int n = nums.length;

        // List<List<Integer>> list = new ArrayList<>();

        // int sum;

        // for (int i=0; i<n-1; i++)
        // {
        //     sum = nums[i] + nums[i+1];

        //     for (int j=i+2; j<n; j++)
        //     {
        //         if (nums[j] + sum == 0)
        //         {
        //             List<Integer> row = new ArrayList<>()                    ;
        //             row.add(nums[i]);
        //             row.add(nums[i+1]);
        //             row.add(nums[j]);

        //             Collections.sort(row);

        //             if (!list.contains(row))
        //             {
        //                 list.add(row);
        //             }
        //         }
        //     }
        // }

        // return list;

        // for (int i=0; i<n; i++)
        // {
        //     for (int j=i+1; j<n; j++)
        //     {
        //         for (int k=j+1; k<n; k++)
        //         {
        //             if (nums[i] + nums[j] + nums[k] == 0)
        //             {
        //                 List<Integer> row = new ArrayList<>();
        //                 row.add(nums[i]);
        //                 row.add(nums[j]);
        //                 row.add(nums[k]);
                        
        //                 Collections.sort(row);

        //                 if (!list.contains(row))
        //                 {
        //                     list.add(row);
        //                 }
                        
        //             }
        //         }
        //     }
        // }

        // return list;
        
    }
}