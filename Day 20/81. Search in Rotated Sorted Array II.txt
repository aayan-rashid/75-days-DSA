class Solution {
    public boolean search(int[] nums, int target) 
    {
        
        int left = 0;
        int right = nums.length - 1;

        while (left <= right)    
        {
            int mid = (left + right)/2;

            if (nums[mid] == target)
            {
                return true;
            }

            if (nums[left] == nums[mid] && nums[mid] == nums[right])
            {
                right--;
                left++;
                continue;
            }


            if (nums[left] <= nums[mid]) // left sorted
            {
                if (target <= nums[mid] && target >= nums[left]) 
                {
                    right = mid - 1; // search in left part
                } 
                else 
                {
                    left = mid + 1; // search in right part
                }
            } 
            else // right sorted
            {
                if (target >= nums[mid] && target <= nums[right]) 
                {
                    left = mid + 1; // search in right part
                } 
                else 
                {
                    right = mid - 1; // search in left part
                }
            }






        }

        return false;






        // Linear search O(n)
        
        // for (int i = 0; i< nums.length; i++)
        // {
        //     if (nums[i] == target)
        //     {
        //         return true;
        //     }
        // }

        // return false;
    }
}