import java.util.ArrayList;
import java.util.List;
import java.util.*;

//import jdk.internal.jshell.tool.resources.l10n;

public class Solution {
    public static List< List< Integer > > mergeOverlappingIntervals(int [][]arr){
        // Write your code here.


        int n = arr.length;

        List<List<Integer>> res = new ArrayList<>();

        if (arr == null || arr.length == 0)
        {
            return res;
        }
        //java.util.Arrays.sort(arr, java.util.Comparator.comparingInt(a -> a[0]));
        Arrays.sort(arr, Comparator.comparingInt(a -> a[0]));

        //Arrays.sort(arr); not for 2d array


        int start = arr[0][0];
        int end = arr[0][1];

        for (int i=1; i<n; i++)
        {
            if (end >= arr[i][0])
            {
                end = Math.max(end, arr[i][1]);
            }
            else
            {
                List<Integer> row = new ArrayList<>();
                row.add(start);
                row.add(end);
                res.add(row);

                start = arr[i][0];
                end = arr[i][1];
            }
        }

        List<Integer> lastelement = new ArrayList<>();
        lastelement.add(start);
        lastelement.add(end);
        res.add(lastelement);

        return res;


        // int test = -1;
        // List<List<Integer>> res = new ArrayList<>();

        // List<Integer> lastrow = res.get(res.size()-1);
        // int lastelement = lastrow.get(lastrow.size()-1);

        // int rows = arr.length;

        // if (rows == 0 || arr == null)
        // {
        //     return res;
        // }
        


        // for (int i=0; i<rows; i++)
        // {
        //     int start = arr[i][0];
        //     int end = arr[i][1];

        //     if (res.size() != 0 && end <= lastelement)
        //     {
        //         continue;
        //     }

        //     for (int j=i+1; j<rows; j++)
        //     {
        //         if (end >= arr[j][0])
        //         {
        //             test = Math.max(arr[j][1], test);
        //         }
        //         else
        //         {
        //             break;
        //         }
        //     }
        //     lastrow.add(start);
        //     lastrow.add(end);
                
            
        // }
        // return res;
    }
}