import java.util.*;

class Solution {
    public int[][] merge(int[][] arr) {

        int n = arr.length;
        int[][] ans = new int[n][];


        List<List<Integer>> res = new ArrayList<>();

        if (arr == null || arr.length == 0)
        {
            return ans;
        }
        
        //java.util.Arrays.sort(arr, java.util.Comparator.comparingInt(a -> a[0]));

        Arrays.sort(arr, Comparator.comparingInt(a -> a[0]));

        //Arrays.sort(arr);


        int start = arr[0][0];
        int end = arr[0][1];

        for (int i=1; i<n; i++)
        {
            if (end >= arr[i][0])
            {
                end = Math.max(end, arr[i][1]);
            }
            else
            {
                List<Integer> row = new ArrayList<>();
                row.add(start);
                row.add(end);
                res.add(row);

                start = arr[i][0];
                end = arr[i][1];
            }
        }

        List<Integer> lastelement = new ArrayList<>();
        lastelement.add(start);
        lastelement.add(end);
        res.add(lastelement);


        // for (int i=0; i<n; i++)
        // {
        //     for(int j=0; j<2; j++)
        //     {
        //         ans[i][j] = res.get(i).get(j);
        //     }
        // }

        //int[] sol = res.toArray(new int[0]);

        //int[] sol = res.stream().mapToInt(Integer::intValue).toArray();

        int[][] array2D = new int[res.size()][];
        for (int i = 0; i < res.size(); i++) {
            ArrayList<Integer> row = res.get(i);
            array2D[i] = new int[row.size()];
            for (int j = 0; j < row.size(); j++) {
                array2D[i][j] = row.get(j);
            }
        }


        return array2D;




    //     int n = arr.length;

    //     int[][] res = new int[n][2];

    //     // for (int[] rows : arr) {
    //     //     System.out.println(Arrays.toString(rows));
    //     // }

    //     // Arrays.sort(arr, Comparator.comparingInt(a -> a[0]));

    //     Arrays.sort(arr, Comparator.comparingInt(a -> a[0]));

    //     for (int[] rows : arr) {
    //         System.out.println(Arrays.toString(rows));
    //     }

    //     // int test = -1;
    //     // int row = 0;
    //     // int col = 0;
    //     // boolean isbreak;

    //     // for (int i = 0; i < n; i++) {
    //         // isbreak = false;
    //         // for (int j = i + 1; j < n; j++) {
    //         //     if (arr[i][0] != arr[j][0] && arr[i][1] <= arr[j][0]) 
    //         //     {

    //         //     } 
    //         //     else if (arr[i][0] != arr[j][0] && arr[i][1] > arr[j][0])
    //         //     {

    //         //     }
                
    //         //     else 
    //         //     {
    //         //         test = Math.max(test, arr[j][1]);
    //         //         if (arr[j][0] != arr[j+1][0])
    //         //         {
    //         //             arr[row][col] = arr[i][0];
    //         //             col++;
    //         //             arr[row][col] = arr[j][1];
    //         //             isbreak = true;
    //         //             break;
    //         //         }
    //         //     }
    //         //     row++;
    //         //     if (col == 2)
    //         //     {
    //         //         col =0;
    //         //     }
    //         //     if (isbreak)
    //         //     {
    //         //         break;
    //         //     }
    //         // }
    //    // }

    //    int lastrow = res.length - 1;
    //    int lastcol = res[lastrow].length - 1;
    //    int test = -1;


    //    for (int i=0; i<n; i++)
    //    {
    //        int start = arr[i][0];
    //        int end = arr[i][0];

    //        if (!res.empty() && end <= res[lastrow][lastcol])
    //        {
    //            continue;
    //        }
           
    //        for (int j=i+1; j<n; j++)
    //        {
    //            if (arr[j][0] <= end)
    //            {
    //                test = Math.max(test, arr[j][1]);
    //            }
    //            else
    //            {
    //                break;
    //            }
    //        }
           
    //    }

    //     return res;

    }
}